// Добавляем меню:
function onOpen() {
	SpreadsheetApp.getUi().createMenu("Меню").addItem("Получить данные", "updateOperationJournal").addToUi();
}

// получает данные по api из БД клиники, собирает их в массив и вставляет их во вкладку "Журнал операций" шаблона для фин. аналитики:

let lnkpart = "kt-domodedovo";

function updateOperationJournal() {
	let ui = SpreadsheetApp.getUi();
	let responseBegin = ui.prompt("Введите дату начала загрузки в формате", "dd.mm.yyyy", ui.ButtonSet.OK_CANCEL);
	let startDate = responseBegin.getResponseText().split(".").reverse().join("-"); // дату начала загрузки
	let responseEnd = ui.prompt("Введите дату окончания загрузки в формате", "dd.mm.yyyy", ui.ButtonSet.OK_CANCEL);
	let endDate = responseEnd.getResponseText().split(".").reverse().join("-"); // дату окончания загрузки

	// Получаем список счетов через API:
	let orders = getOrders();
	let resultArray = [];

	Logger.log(getAppointments());

	getAppointments().map((item) => {
		let clientById = getClienteNameByClienteId(item.client_id);
		let order = orders.filter((orderItem) => orderItem.orderId === item.order_id)[0];

		resultArray.push([
			item.date,
			`${item.time} ${item.duration} мин`,
			item.status_text,
			clientById[0][1],
			clientById[0][1],
			order ? order.title : "",
			"",
			order ? parseFloat(order.sum) : "",
			"",
			"",
			"",
			"",
			item.username,
			item.note,
			getClinicNameByClinicId(item.clinic_id),
		]);
	});

	// for (let i = 0; i < arrayOfAppointmentPages.length; i++) {
	// 	for (let k = 0; k < arrayOfAppointmentPages[i].data.length; k++) {
	// 		let accesToken = GetToken();
	// 		let order = orders.filter((item) => item.orderId == arrayOfAppointmentPages[i].data[k].order_id)[0];
	// 		let sum;
	// 		let title;
	// 		if (order) {
	// 			sum = parseFloat(order.sum);
	// 			title = order.title;
	// 		} else {
	// 			sum = "";
	// 			title = "";
	// 		}

	// 		resultArray.push([
	// 			arrayOfAppointmentPages[i].data[k].date,
	// 			arrayOfAppointmentPages[i].data[k].time + " " + arrayOfAppointmentPages[i].data[k].duration + " мин",
	// 			arrayOfAppointmentPages[i].data[k].status_text,
	// 			getClienteNameByClienteId(arrayOfAppointmentPages[i].data[k].client_id, accesToken)[0][0],
	// 			getClienteNameByClienteId(arrayOfAppointmentPages[i].data[k].client_id, accesToken)[0][1],
	// 			title,
	// 			"",
	// 			sum,
	// 			"",
	// 			"",
	// 			"",
	// 			"",
	// 			arrayOfAppointmentPages[i].data[k].username,
	// 			arrayOfAppointmentPages[i].data[k].note,
	// 			getClinicNameByClinicId(arrayOfAppointmentPages[i].data[k].clinic_id, accesToken),
	// 		]);
	// 	}
	// }

	// Вспомогательные функции:

	// Получаем токен для авторизации
	function GetToken() {
		let createJwt = ({ privateKey, expiresInSeconds, data = {} }) => {
			// Sign token using HMAC with SHA-256 algorithm
			let header = {
				alg: "HS512",
				typ: "JWT",
			};

			let now = Date.now();
			let expires = new Date(now);
			expires.setSeconds(expires.getSeconds() + expiresInSeconds);

			// iat = issued time, exp = expiration time
			let payload = {
				exp: Math.round(expires.getTime() / 1000) - 1,
				iat: Math.round(now / 1000) - 1,
				iss: "...",
			};

			// add user payload
			Object.keys(data).forEach(function (key) {
				payload[key] = data[key];
			});

			let base64Encode = (text, json = true) => {
				let data = json ? JSON.stringify(text) : text;
				return Utilities.base64EncodeWebSafe(data).replace(/=+$/, "");
			};

			let toSign = `${base64Encode(header)}.${base64Encode(payload)}`;
			let signatureBytes = Utilities.computeHmacSignature(
				Utilities.MacAlgorithm.HMAC_SHA_512,
				toSign,
				privateKey
			);
			let signature = base64Encode(signatureBytes, false);
			return `${toSign}.${signature}`;
		};

		return createJwt({
			privateKey: "...",
			expiresInSeconds: 64, // expires in 64 seconds
			data: {},
		});
	}

	function getOrders() {
		let resultArray = [];
		let pageNumberNext = 0;
		let resultFetch = [];

		do {
			resultFetch = JSON.parse(
				UrlFetchApp.fetch(
					`https://${lnkpart}.medods.ru/api/v2/orders?dateAfter=${startDate}&dateBefore=${endDate}&limit=100&offset=${pageNumberNext}`,
					{
						headers: {
							accept: "application/json",
							Authorization: GetToken(),
						},
					}
				)
			);

			resultFetch.data.map((item) => {
				resultArray.push({
					orderId: item.id,
					sum: item.finalSum,
				});
			});

			pageNumberNext = resultArray.length;
			Utilities.sleep(1000);
		} while (pageNumberNext !== resultFetch.totalItems);

		return resultArray;
	}

	function getAppointments() {
		let resultArray = [];
		let pageNumberNext = 0;
		let resultFetch = [];

		let token = GetToken();

		do {
			resultFetch = JSON.parse(
				UrlFetchApp.fetch(
					`https://${lnkpart}.medods.ru/api/v2/appointments?dateStart=${startDate}&dateEnd=${endDate}&limit=100&offset=${pageNumberNext}`,
					{
						headers: {
							accept: "application/json",
							Authorization: token,
						},
					}
				)
			);

			if (pageNumberNext === 1900) token = GetToken();

			resultArray.push(...resultFetch.data);
			pageNumberNext = resultArray.length;

			Logger.log(
				`resultFetch.totalItems : ${resultFetch.totalItems} resultArray : ${pageNumberNext} token : ${token}`
			);

			Utilities.sleep(1000);
		} while (pageNumberNext !== resultFetch.totalItems);

		Logger.log(resultArray);

		return resultArray;
	}

	// Возвращает одну услгу по своему ID, состоящий  названия услуги
	function getEntryArrayById(arrayentrysId) {
		let title = "";
		for (let i = 0; i < arrayentrysId.length; i++) {
			let params = {
				headers: {
					accept: "application/json",
					Authorization: GetToken(),
				},
			};

			let dataObj = JSON.parse(
				UrlFetchApp.fetch(`https://${lnkpart}.medods.ru/api/v2/entries?id=${arrayentrysId[i].id}`, params)
			);
			if (i == 0) {
				title = dataObj.data[0].title;
			} else {
				title = title + "\n" + dataObj.data[0].title;
			}
		}
		return title;
	}

	// Возвращает строку с названием клиники:

	function getClinicNameByClinicId(clinicId) {
		let params = {
			headers: {
				accept: "application/json",
				Authorization: GetToken(),
			},
		};

		let dataObj = JSON.parse(
			UrlFetchApp.fetch(`https://${lnkpart}.medods.ru/api/v2/clinics?id=${clinicId}&limit=100&offset=0`, params)
		);
		Utilities.sleep(1000);
		return dataObj.data[0].title;
	}

	// Возвращает строку состоящую из Фамилии Имени и Отчества пациенты и даты рождения:

	function getClienteNameByClienteId(clienteId) {
		let arreyRezal = [];
		let params = {
			headers: {
				accept: "application/json",
				Authorization: GetToken(),
			},
		};
		Logger.log("dataObj call");
		let dataObj = JSON.parse(
			UrlFetchApp.fetch(`https://${lnkpart}.medods.ru/api/v2/clients?id=${clienteId}&limit=100&offset=0`, params)
		);
		let fio;
		let birthdate;
		if (dataObj.data[0]) {
			fio = dataObj.data[0].surname + " " + dataObj.data[0].name + " " + dataObj.data[0].second_name;
			birthdate = dataObj.data[0].birthdate;
		} else {
			fio = "";
			birthdate = "";
		}
		arreyRezal.push([fio, birthdate]);
		Utilities.sleep(5000);
		return arreyRezal;
	}

	// Вставляем :

	let spreadSheet = SpreadsheetApp.getActiveSpreadsheet();
	let operationJournalSheet = spreadSheet.getSheetByName("КТ Дмд");
	let kont = operationJournalSheet.getRange("A2:A").getValues();
	let lr = 0;
	for (let i = 0; i < kont.length; i++) {
		if (kont[i] != "") {
			lr++;
		}
	}
	if (resultArray.length > 0) {
		operationJournalSheet.getRange(lr + 2, 1, resultArray.length, resultArray[0].length).setValues(resultArray);
	}
}
